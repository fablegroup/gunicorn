import builtins
from argparse import ArgumentParser
from collections.abc import Callable
from ssl import (
    CERT_NONE,
    CERT_OPTIONAL,
    PROTOCOL_TLS,
    SSLContext,
    VerifyMode,
    _SSLMethod,
)
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    Literal,
    Optional,
    Tuple,
    Type,
    TypeAlias,
    Union,
    overload,
)

from _typeshed import Incomplete
from typing_extensions import NamedTuple

from gunicorn import __version__, util
from gunicorn.arbiter import Arbiter
from gunicorn.errors import ConfigError
from gunicorn.glogging import Logger
from gunicorn.http import Request
from gunicorn.http.wsgi import Response
from gunicorn.instrument.statsd import Statsd
from gunicorn.reloader import reloader_engines
from gunicorn.workers.base import Worker

KNOWN_SETTINGS: list[type[Setting]]
PLATFORM: Incomplete

_t_pre_request: TypeAlias = Callable[[Worker, Request], None]
_t_post_request: TypeAlias = Callable[[Worker, Request, dict[str, str], Response], None]
_t_arbiter: TypeAlias = Callable[[Arbiter], None]
_t_worker: TypeAlias = Callable[[Worker], None]
_t_fork: TypeAlias = Callable[[Arbiter, Worker], None]

def make_settings(ignore: Incomplete | None = ...) -> dict[str, Setting]: ...
def auto_int(_: Umask, x: str) -> int: ...

class _SSLOptions(NamedTuple):
    ssl_version: _SSLMethod
    certfile: str | None
    keyfile: str | None
    cert_reqs: VerifyMode
    ca_certs: str | None
    suppress_ragged_eofs: bool
    do_handshake_on_connect: bool
    ciphers: str | None

class Config:
    settings: Incomplete
    usage: Incomplete
    prog: Incomplete
    env_orig: Incomplete
    def __init__(self, usage: str | None = ..., prog: str | None = ...) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any | None) -> None: ...
    def set(self, name: str, value: Any) -> None: ...
    def get_cmd_args_from_env(self) -> list[str]: ...
    def parser(self) -> ArgumentParser: ...
    @property
    def worker_class_str(self) -> str: ...
    @property
    def worker_class(self) -> type[Worker]: ...
    @property
    def address(self) -> list[tuple[str, int]]: ...
    @property
    def uid(self) -> int: ...
    @property
    def gid(self) -> int: ...
    @property
    def proc_name(self) -> str: ...
    @property
    def logger_class(self) -> type[Statsd] | type[Logger]: ...
    @property
    def is_ssl(self) -> str | None: ...
    @property
    def ssl_options(self) -> _SSLOptions: ...
    @property
    def env(self) -> dict[str, str]: ...
    @property
    def sendfile(self) -> bool: ...
    @property
    def reuse_port(self) -> bool: ...
    @property
    def paste_global_conf(self) -> dict[str, Incomplete]: ...

class SettingMeta(type):
    def __new__(
        cls, name: str, bases: tuple[type["Setting"]], attrs: dict[str, Any]
    ) -> Any: ...
    def fmt_desc(cls, desc: str) -> None: ...

class BaseSetting:
    # defaults
    name: str | None
    section: str | None
    value: None | bool | int | list[str] | str | Callable[..., Incomplete] | dict[
        str, Incomplete
    ]
    cli: list[str] | None
    validator: Callable[..., Incomplete] | None
    type: Incomplete | type[int] | type[str]
    meta: str | None
    action: str
    default: None | bool | int | list[str] | str | Callable[..., Incomplete] | dict[
        str, Incomplete
    ]
    short: str | None
    desc: str | None
    nargs: str | None
    const: bool | None
    def __init__(self) -> None: ...
    def add_option(self, parser: ArgumentParser) -> None: ...
    def copy(self) -> Setting: ...
    def get(self) -> Any: ...
    def set(self, val: Any) -> None: ...
    def __lt__(self, other: Setting) -> bool: ...
    __cmp__ = __lt__

class Setting(BaseSetting, metaclass=SettingMeta):
    # from SettingsMeta.__new__
    # short: str
    order: int

class PosIntSetting(Setting):
    type: type[int]
    validator: Callable[..., Incomplete]

class BoolSetting(Setting):
    default: bool = False
    action: str = "store_true"
    validator: Callable[..., Incomplete]

class HookSetting(Setting):
    section: str = "Server Hooks"
    validator: Callable[..., Incomplete]
    value: Callable[..., Incomplete] | None  # FIXME
    type: Incomplete

@overload
def validate_bool(val: None) -> None: ...
@overload
def validate_bool(val: str | bool) -> bool: ...
def validate_dict(val: dict[str, str]) -> dict[str, str]: ...
def validate_pos_int(val: Any) -> int: ...
def validate_ssl_version(val: _SSLMethod | str) -> _SSLMethod | int: ...
@overload
def validate_string(val: None) -> None: ...
@overload
def validate_string(val: str) -> str: ...
@overload
def validate_file_exists(val: None) -> None: ...
@overload
def validate_file_exists(val: str) -> str: ...
def validate_list_string(val: str | list[str]) -> list[str | None]: ...
def validate_list_of_existing_files(val: list[Any]) -> list[Any]: ...
def validate_string_to_list(val: None | str) -> list[str]: ...
def validate_string_to_addr_list(val: None | str) -> list[str]: ...
def validate_class(val: Incomplete) -> Incomplete: ...
def validate_callable(arity: int) -> Callable[..., Incomplete]: ...
@overload
def validate_user(val: None) -> None: ...
@overload
def validate_user(val: int) -> int: ...
@overload
def validate_group(val: None) -> None: ...
@overload
def validate_group(val: int) -> int: ...
def validate_post_request(val: _t_post_request) -> _t_post_request: ...
def validate_chdir(val: str) -> str: ...
def validate_statsd_address(val: str | None) -> tuple[str, int] | None: ...
def validate_reload_engine(val: str) -> str: ...
def get_default_config_file() -> str | None: ...
@overload
def validate_header_map_behaviour(val: None) -> None: ...
@overload
def validate_header_map_behaviour(val: str) -> str: ...
@overload
def validate_fatal_behaviour(val: None) -> None: ...
@overload
def validate_fatal_behaviour(val: str) -> str: ...

class ConfigFile(Setting): ...
class WSGIApp(Setting): ...
class Bind(Setting): ...
class Backlog(PosIntSetting): ...
class Workers(PosIntSetting): ...
class WorkerClass(Setting): ...
class WorkerThreads(PosIntSetting): ...
class WorkerConnections(PosIntSetting): ...
class MaxRequests(PosIntSetting): ...
class MaxRequestsJitter(PosIntSetting): ...
class Timeout(PosIntSetting): ...
class GracefulTimeout(PosIntSetting): ...
class Keepalive(PosIntSetting): ...
class LimitRequestLine(PosIntSetting): ...
class LimitRequestFields(PosIntSetting): ...
class LimitRequestFieldSize(PosIntSetting): ...
class Reload(BoolSetting): ...
class ReloadEngine(Setting): ...

class ReloadExtraFiles(Setting):
    default: list[Any]

class Spew(BoolSetting): ...
class ConfigCheck(BoolSetting): ...
class PrintConfig(BoolSetting): ...
class PreloadApp(BoolSetting): ...
class Sendfile(Setting): ...
class ReusePort(BoolSetting): ...
class Chdir(Setting): ...
class Daemon(BoolSetting): ...
class Env(Setting): ...
class Pidfile(Setting): ...
class WorkerTmpDir(Setting): ...

class User(Setting):
    value: int | None

class Group(Setting):
    value: int | None

class Umask(Setting): ...
class Initgroups(BoolSetting): ...
class TmpUploadDir(Setting): ...

class SecureSchemeHeader(Setting):
    default: dict[str, str]

class ForwardedAllowIPS(Setting): ...
class AccessLog(Setting): ...
class DisableRedirectAccessToSyslog(BoolSetting): ...
class AccessLogFormat(Setting): ...
class ErrorLog(Setting): ...
class Loglevel(Setting): ...
class CaptureOutput(BoolSetting): ...
class LoggerClass(Setting): ...
class LogConfig(Setting): ...

class LogConfigDict(Setting):
    default: dict[Any, Any]

class LogConfigJson(Setting): ...
class SyslogTo(Setting): ...
class Syslog(BoolSetting): ...
class SyslogPrefix(Setting): ...
class SyslogFacility(Setting): ...
class EnableStdioInheritance(BoolSetting): ...
class StatsdHost(Setting): ...
class DogstatsdTags(Setting): ...
class StatsdPrefix(Setting): ...
class Procname(Setting): ...
class DefaultProcName(Setting): ...
class PythonPath(Setting): ...
class Paste(Setting): ...

class OnStarting(HookSetting):
    @staticmethod
    def on_starting(server: Arbiter) -> None: ...
    default: _t_arbiter
    value: _t_arbiter | None  # FIXME: cannot be None

class OnReload(HookSetting):
    @staticmethod
    def on_reload(server: Arbiter) -> None: ...
    default: _t_arbiter
    value: _t_arbiter | None  # FIXME: cannot be None

class WhenReady(HookSetting):
    @staticmethod
    def when_ready(server: Arbiter) -> None: ...
    default: _t_arbiter
    value: _t_arbiter | None  # FIXME: cannot be None

class Prefork(HookSetting):
    @staticmethod
    def pre_fork(server: Arbiter, worker: Worker) -> None: ...
    default: _t_fork
    value: _t_fork | None  # FIXME: cannot be None

class Postfork(HookSetting):
    @staticmethod
    def post_fork(server: Arbiter, worker: Worker) -> None: ...
    default: _t_fork
    value: _t_fork | None  # FIXME: cannot be None

class PostWorkerInit(HookSetting):
    value: _t_worker | None  # FIXME: cannot be None
    default: _t_worker
    @staticmethod
    def post_worker_init(worker: Worker) -> None: ...

class WorkerInt(HookSetting):
    value: _t_worker | None  # FIXME: cannot be None
    default: _t_worker
    @staticmethod
    def worker_int(worker: Worker) -> None: ...

class WorkerAbort(HookSetting):
    value: _t_worker | None  # FIXME: cannot be None
    default: _t_worker
    @staticmethod
    def worker_abort(worker: Worker) -> None: ...

class PreExec(HookSetting):
    @staticmethod
    def pre_exec(server: Arbiter) -> None: ...
    default: _t_arbiter
    value: _t_arbiter | None  # FIXME: cannot be None

class PreRequest(HookSetting):
    pre_request: _t_pre_request
    default: _t_pre_request
    value: _t_pre_request | None  # FIXME: cannot be None

class PostRequest(HookSetting):
    @staticmethod
    def post_request(
        worker: Worker, req: Request, environ: dict[str, str], resp: Response
    ) -> None: ...
    default: _t_post_request
    value: _t_post_request | None  # FIXME: cannot be None

class ChildExit(HookSetting):
    @staticmethod
    def child_exit(server: Arbiter, worker: Worker) -> None: ...
    default: Callable[[Arbiter, Worker], None]
    value: Callable[[Arbiter, Worker], None] | None  # FIXME: cannot be None

class WorkerExit(HookSetting):
    @staticmethod
    def worker_exit(server: Arbiter, worker: Worker) -> None: ...
    default: _t_fork
    value: _t_fork | None  # FIXME: cannot be None

class NumWorkersChanged(Setting):
    @staticmethod
    def nworkers_changed(
        server: Arbiter, new_value: int, old_value: int | None
    ) -> None: ...
    default: Callable[[Arbiter, int, int | None], None]
    value: Callable[[Arbiter, int, int | None], None] | None  # FIXME: cannot be None

class OnExit(HookSetting):
    @staticmethod
    def on_exit(server: Arbiter) -> None: ...
    default: _t_arbiter
    value: _t_arbiter | None  # FIXME: cannot be None

class NewSSLContext(HookSetting):
    @staticmethod
    def ssl_context(
        config: Config, default_ssl_context_factory: type[SSLContext]
    ) -> SSLContext: ...
    default: Callable[[Config, type[SSLContext]], SSLContext]
    value: Callable[
        [Config, type[SSLContext]], SSLContext
    ] | None  # FIXME: cannot be None

class ProxyProtocol(BoolSetting): ...
class ProxyAllowFrom(Setting): ...
class KeyFile(Setting): ...
class CertFile(Setting): ...
class SSLVersion(Setting): ...
class CertReqs(Setting): ...
class CACerts(Setting): ...
class SuppressRaggedEOFs(BoolSetting): ...
class DoHandshakeOnConnect(BoolSetting): ...
class Ciphers(Setting): ...
class PasteGlobalConf(Setting): ...
class StripHeaderSpaces(BoolSetting): ...
class PermitUnconventionalHTTPMethod(BoolSetting): ...
class PermitUnconventionalHTTPVersion(BoolSetting): ...
class CasefoldHTTPMethod(BoolSetting): ...
class ForwarderHeaders(Setting): ...
class HeaderMap(Setting): ...
class TolerateDangerousFraming(BoolSetting): ...
class OnFatal(Setting): ...
